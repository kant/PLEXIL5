package org.nianet.plexil.plexilxml2maude;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.nianet.plexil.plexilxml2maude.jaxbmodel.PlexilPlan;
import org.nianet.plexil.scriptcontext.jaxbmodel.generated.PLEXILScript;

import plexil.Ple2XMLProcessingException;
import plexil.Ple2XmlConverter;
import plexil.PlexilParserState;

public class PlexilXMLUnmarshaller {
	
	private static final String defaultXLSTName="extendedplexil2coreplexiltranslate.xsl";
	
	private static PlexilXMLUnmarshaller instance=new PlexilXMLUnmarshaller();
	
	public static PlexilXMLUnmarshaller getInstance(){
		return instance;
	}

	
	public synchronized PLEXILScript getPlexilScriptFromXML(String path) throws PlexilPlanLoadException{
		try {

			JAXBContext jc = null;
			Unmarshaller u = null;

			jc = JAXBContext.newInstance("org.nianet.plexil.scriptcontext.jaxbmodel.generated");

			u = jc.createUnmarshaller();
			
			PLEXILScript ps=(PLEXILScript)u.unmarshal(new FileInputStream(path));
			
			return ps;
			
		} catch (JAXBException e) {
			throw new PlexilPlanLoadException("Error unmarshalling XML plexil script:",e);	
		} catch (ClassCastException e){
			throw new PlexilPlanLoadException("Error unmarshalling XML plexil script:",e);
		} catch (FileNotFoundException e) {
			throw new PlexilPlanLoadException("Error unmarshalling XML plexil script:",e);
		} 

		
	}
	
	
	/**
	 * 
	 * @param path PLE standard plexil program
	 * @param xmlDestinationPath file path to store XML document. Send null if you don't want to make it persistent.
	 * @return
	 * @throws PlexilPlanLoadException
	 */
	public synchronized PlexilPlan getPlexilPlanFromPLE(String path, String xmlDestinationPath) throws PlexilPlanLoadException{

		try {
			JAXBContext context;
			context = JAXBContext.newInstance("org.nianet.plexil.plexilxml2maude.jaxbmodel");
			Unmarshaller unmarshaller=context.createUnmarshaller();

			String text=Ple2XmlConverter.getXMLFromPLE(path);
			
			
			if (xmlDestinationPath!=null){
				BufferedWriter bw=new BufferedWriter(new FileWriter(xmlDestinationPath));
				bw.write(text);
				bw.close();
			}
			
			
			//System.out.println("--GENERATED-PLEXIL-XML:\n"+text+"\n--END-GENERATED-PLEXIL-XML");

			String xmlCoreDestinationPath=xmlDestinationPath+"c";
			
			generateCorePlexilXMLPlan(xmlDestinationPath, xmlCoreDestinationPath);
			
			InputStream is = new FileInputStream(xmlCoreDestinationPath); 
				
			//new ByteArrayInputStream(text.getBytes("UTF-8"));			


			PlexilPlan plan=(PlexilPlan)unmarshaller.unmarshal(is);	
						
			//update nodes with variables and absolute names info
			plan.fillOnNodesAbsolutePath();
			plan.setNodesLexicalScopedVariables();

			return plan;

		} catch (JAXBException e) {
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program.",e);
		} catch (Ple2XMLProcessingException e) {						
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program: "+PlexilParserState.lastErrorMessage,e);
		} catch (UnsupportedEncodingException e) {
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program.",e);
		} catch (ClassCastException e){
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program. Root element on XML must be a PlexilPlan.",e);
		} catch (IOException e) {
			throw new PlexilPlanLoadException("Error while trying to save XML document on:"+xmlDestinationPath,e);
		} catch (Exception e) {
			throw new PlexilPlanLoadException("Error while trying to transform extended plexil syntax to core plexil syntax:"+xmlDestinationPath,e);
		}


	}

	
	private synchronized void generateCorePlexilXMLPlan(String extendedPlanInputPath,String corePlanOutputPath) throws PlexilPlanLoadException{
				
		try{
			String[] saxonArgs = new String[4];
			saxonArgs[0] = "-o";
			saxonArgs[1] = corePlanOutputPath;
			saxonArgs[2] = extendedPlanInputPath;	
			
			String schemaPath=PlexilXMLUnmarshaller.class.getResource(defaultXLSTName).getPath().replaceAll("%20", " ");
			//if plexil5 is running from a jar, the xsl schema file should be at its same directory level.
			if (schemaPath.contains("!")){
				schemaPath=JarPathSolver.getJarLocation()+"/"+defaultXLSTName;
			}
			
			saxonArgs[3] = schemaPath;
			//saxonArgs[3] = "/Users/hcadavid/temp/extendedplexil2coreplexiltranslate.xsl";
		
			net.sf.saxon.Transform.main(saxonArgs);
			
			BufferedReader reader = new BufferedReader(new FileReader(corePlanOutputPath));
	        String line = "";
	        StringBuffer oldtext = new StringBuffer();
	        while((line = reader.readLine()) != null){            
	        	oldtext.append(line + "\r\n");
	        }
	        reader.close();
	
	        /*
	         * Remove underlines to avoid Maude's syntactical issues.
	         */
	        String newtext = oldtext.toString().replaceAll("_", "-");
	       
	        FileWriter writer = new FileWriter(corePlanOutputPath);
	        writer.write(newtext);
	        writer.close();
		}
	    catch(Exception e){
	    	throw new PlexilPlanLoadException("Error while converting extented plexil syntax to core plexil syntax:"+e.getMessage(),e);
	    }
		
	}
	
	/**
	 * 
	 * @param xmlContent
	 * @return
	 * @throws PlexilPlanLoadException
	 */
	public synchronized PlexilPlan getPlexilPlanFromPLX(File xmlFile) throws PlexilPlanLoadException{

		try {
			
			JAXBContext context;
			context = JAXBContext.newInstance("org.nianet.plexil.plexilxml2maude.jaxbmodel");
			Unmarshaller unmarshaller=context.createUnmarshaller();

			
			//System.out.println("--GENERATED-PLEXIL-XML:\n"+text+"\n--END-GENERATED-PLEXIL-XML");

			String xmlCoreDestinationPath=xmlFile.getAbsolutePath()+"c";
			
			generateCorePlexilXMLPlan(xmlFile.getAbsolutePath(), xmlCoreDestinationPath);
			
			InputStream is = new FileInputStream(xmlCoreDestinationPath); 
				
			//new ByteArrayInputStream(text.getBytes("UTF-8"));			


			PlexilPlan plan=(PlexilPlan)unmarshaller.unmarshal(is);	
						
			//update nodes with variables and absolute names info
			plan.fillOnNodesAbsolutePath();
			
			
			plan.setNodesLexicalScopedVariables();
			
			
			return plan;

			
			
			
			
			
			
			
			/*JAXBContext context;
			context = JAXBContext.newInstance("org.nianet.plexil.plexilxml2maude.jaxbmodel");
			Unmarshaller unmarshaller=context.createUnmarshaller();
			
			InputStream is = new ByteArrayInputStream(xmlContent.getBytes("UTF-8"));

			PlexilPlan plan=(PlexilPlan)unmarshaller.unmarshal(is);	
						
			//update nodes with variables and absolute names info
			plan.fillOnNodesAbsolutePath();
			plan.setNodesLexicalScopedVariables();

			return plan;*/

		} catch (JAXBException e) {
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program.",e);
		} catch (ClassCastException e){
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program. Root element on XML must be a PlexilPlan.",e);
		} catch (FileNotFoundException e) {
			throw new PlexilPlanLoadException("Error unmarshalling XML generated by standard plexil program. Root element on XML must be a PlexilPlan.",e);
		} 


	}

	
	
	
	public static void main(String[] args) throws JAXBException, Ple2XMLProcessingException, UnsupportedEncodingException {
		JAXBContext context=JAXBContext.newInstance("org.nianet.plexil.jaxbmodel");
		Unmarshaller unmarshaller=context.createUnmarshaller();
		
		String text=Ple2XmlConverter.getXMLFromPLE("/home/hcadavid/nia/PLEXILSTD/plexil/standard-plexil/test/SimpleAssignment.ple");
				

		InputStream is = new ByteArrayInputStream(text.getBytes("UTF-8"));
		
		
		PlexilPlan plan=(PlexilPlan)unmarshaller.unmarshal(is);
				
		
//		JAXBContext        context =
//
//			JAXBContext.newInstance("<package-name>") ;
//
//			Unmarshaller         unmarshaller =
//
//			         context.createUnmarshaller() ;
//
//			Library           library =
//
//			    (Library)unmarshaller.unmarshal
//
//			  (new     FileInputStream("library.xml")) ; 
	}
	
}

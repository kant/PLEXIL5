----                                                        Reduction relations
----                                                       author: Camilo Rocha

mod REDUCTIONS is
 protecting ATOMIC .

 var AS      : ActionSet .
 vars St St' : Config .
 vars PS PS' : Configuration .
 var Sigma   : Context .
 var Gamma   : Context .
 var CL      : ContextList .
 var TL      : TraceList .

 **************************************************
 *** Syncrhonous closure of the atomic relation ***
 *** under the maximal redices strategy         ***
 **************************************************
 op micro : Config -> Config .
 eq micro(Gamma |- [PS] {mtactions} {TL})
  = activateRedexes(applyActions(finished(iterationended(finishinglist(failingcommand(
     failinglist(execretCommand(execempty(execassignment(execommand(execlist(waiting(inac(
     (Gamma |- [PS] {mtactions} {mttrans TL}))))))))))))))) .
 eq micro(St) = St [owise] .

 op clear-transitions : Config -> Config .
 eq clear-transitions(Gamma |- [PS] {AS} {TL})
  = Gamma |- [PS] {AS} {niltrace} .

*** Quiescence reduction
 op quiescence : Config -> Config .
ceq quiescence(St)
  = if processes(St) == processes(St') 
    then clear-transitions(St) 
    else clear-transitions(quiescence(St'))
    fi
 if St' := micro(St) .

*** Macro reduction
crl [macro] :
   {Sigma # CL} > St 
  => {CL} > 
    if CL == nilcontexts
    then quiescence(updateLocalCashAndMonitorFlags(Sigma,St'))
    else updateLocalCashAndMonitorFlags(Sigma,St')
    fi
  if St' := quiescence(St) .
endm

eof

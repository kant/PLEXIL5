//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-257 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.03 at 09:23:03 AM COT 
//


package org.nianet.plexil.plexilxml2maude.jaxbmodel;

import java.math.BigInteger;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.nianet.plexil.configuration.PlexilPropertiesLoader;
import org.nianet.plexil.plexilxml2maude.jaxbmodel.ext.NodeVariable;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element name="Comment" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element ref="{}NodeId"/>
 *         &lt;element ref="{}StartCondition" minOccurs="0"/>
 *         &lt;element ref="{}RepeatCondition" minOccurs="0"/>
 *         &lt;element ref="{}PreCondition" minOccurs="0"/>
 *         &lt;element ref="{}PostCondition" minOccurs="0"/>
 *         &lt;element ref="{}InvariantCondition" minOccurs="0"/>
 *         &lt;element ref="{}EndCondition" minOccurs="0"/>
 *         &lt;element ref="{}SkipCondition" minOccurs="0"/>
 *         &lt;element name="Priority" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" minOccurs="0"/>
 *         &lt;element name="Permissions" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element ref="{}Interface" minOccurs="0"/>
 *         &lt;element ref="{}VariableDeclarations" minOccurs="0"/>
 *         &lt;element ref="{}NodeBody" minOccurs="0"/>
 *       &lt;/all>
 *       &lt;attribute name="NodeType" use="required">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *             &lt;enumeration value="NodeList"/>
 *             &lt;enumeration value="Command"/>
 *             &lt;enumeration value="Assignment"/>
 *             &lt;enumeration value="FunctionCall"/>
 *             &lt;enumeration value="Update"/>
 *             &lt;enumeration value="Request"/>
 *             &lt;enumeration value="Empty"/>
 *             &lt;enumeration value="LibraryNodeCall"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute ref="{}FileName"/>
 *       &lt;attribute ref="{}LineNo"/>
 *       &lt;attribute ref="{}ColNo"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {

})
@XmlRootElement(name = "Node")
public class Node {

	private Map<String,String> lexicalScopeVariables=new Hashtable<String, String>();
	
	
	public Map<String, String> getLexicalScopeVariables() {
		return lexicalScopeVariables;
	}

	private String getVariablesDeclaration(Map<String,String> variablesContext){
		if (this.getVariableDeclarations()==null){
			return "nilocdecl,\n";
		}
		else{
			List<Object> vars=this.getVariableDeclarations().getDeclareVariableOrDeclareArray();

			//multiple variables format: (('x : v(0)) ('y : v(1))),			
			
			String out="(";
			for (Object var:vars){
				if (var instanceof DeclareVariable){
					String vname="'"+((DeclareVariable)var).getName();
					
					
					if (((DeclareVariable)var).getInitialValue()!=null){
						String initialValue=removeConstantFunction(((DeclareVariable)var).getInitialValueExpression(variablesContext));
						out+="("+vname+" : "+initialValue+") ";						
					}
					else{
						if (((DeclareVariable)var).getType()==TypeValues.BOOLEAN){							
							out+="("+vname+" : v(true)) ";		
						}
						else if (((DeclareVariable)var).getType()==TypeValues.INTEGER){
							out+="("+vname+" : v(0)) ";		
						}
						else if (((DeclareVariable)var).getType()==TypeValues.REAL){
							out+="("+vname+" : v(0.0)) ";
						}
						else if (((DeclareVariable)var).getType()==TypeValues.STRING){
							out+="("+vname+" : v(\"\")) ";
						}
						else{
							throw new RuntimeException("Invalid non-initialized variable declaration for type "+((DeclareVariable)var).getType()+":"+ vname);	
						}						
																							
					}
					
				}
				else{
					throw new RuntimeException("Unsupported variable declaration element:"+var.getClass());
				}			
			}		
			out+="),\n";
			return out;
			
		}
	}
	
	/**
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private String getCommandNodeDeclaration(){
		String parameters=null;
		
		if (getCommand().getArguments()==null){
			parameters="nilpar";
		}
		else{
			parameters="";
			List<Object> paramList=getCommand().getArguments().getIntegerValueOrRealValueOrBooleanValue();
			
			int paramCount=0;
			
			for (Object o:paramList){
				//TODO check additional data types					
				if (o instanceof JAXBElement){
					paramCount++;
					parameters+="const(v("+((JAXBElement)o).getValue().toString()+"))"+(paramCount==paramList.size()?"":" , ");
				}
				else{
					throw new RuntimeException("Datatype or expression not supported as a command argument:"+o.getClass()+","+o.toString());
				}
			}
		}
		
		String out=	"op "+this.getNodeId()+" : -> Plexil .\n";
			out+=	"eq "+this.getNodeId()+" = command(\n";
			out+=	"\t\t\t'"+this.getNodeId()+",\n";
			out+=	getVariablesDeclaration(this.getLexicalScopeVariables());
			out+=	"\t\t\t(\n";
			out+=	"  \t\t\t(endc:\t"+(this.getEndCondition()==null?"const(v(true))),\n":this.getEndCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(inv:\t"+(this.getInvariantCondition()==null?"const(v(true))),\n":this.getInvariantCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(post:\t"+(this.getPostCondition()==null?"const(v(true))),\n":this.getPostCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(pre:\t"+(this.getPreCondition()==null?"const(v(true))),\n":this.getPreCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(repeatc:\t"+(this.getRepeatCondition()==null?"const(v(false))),\n":this.getRepeatCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(skip:\t"+(this.getSkipCondition()==null?"const(v(false))),\n":this.getSkipCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(startc:\t"+(this.getStartCondition()==null?"const(v(true)))\n":this.getStartCondition().getExpression(this.getLexicalScopeVariables())+")\n");
			out+=	"  \t\t\t),\n";
			out+=	"\t\t\t("+adjustCommandName(getCommand().getName().getStringValue())+") / "+parameters+"\n";
			out+=	"\t\t\t) .\n";
		return out;

	}

	
	private String removeConstantFunction(String var){
		String keyword="const(";
		if (var.indexOf("const(")==0){
			return var.substring(keyword.length(),var.lastIndexOf(")"));
		}
		else{
			return var;
		}
	}
	/**
	 * 
	 * @return
	 */
	private String getAssignmentNodeDeclaration(){
		String assignmentCommand=null;
		//check assignment type
		//TODO add support to array assignments
		if (this.getNodeBody().getAssignment().getNumericRHS()!=null){
			String assignedExpression=this.getNodeBody().getAssignment().getNumericRHS().getArithmeticExpression().getExpression(this.getLexicalScopeVariables());
			String modifiedVariable=null;
			if (this.getNodeBody().getAssignment().getIntegerVariable()!=null){
				modifiedVariable=new NodeVariable(this.getNodeBody().getAssignment().getIntegerVariable()).getNoVarExpression(this.getLexicalScopeVariables());								
			}
			else if (this.getNodeBody().getAssignment().getRealVariable()!=null){
				modifiedVariable=new NodeVariable(this.getNodeBody().getAssignment().getRealVariable()).getNoVarExpression(this.getLexicalScopeVariables());					
			}
			else{
				throw new RuntimeException(this.getNodeId()+":Numeric assignment: only integer and real variables are supported.");
			}
			assignmentCommand=modifiedVariable+" := "+assignedExpression;
		}
		else if (this.getNodeBody().getAssignment().getBooleanRHS()!=null){
			if (this.getNodeBody().getAssignment().getBooleanVariable()!=null){
				String modifiedVariable=new NodeVariable(this.getNodeBody().getAssignment().getBooleanVariable()).getNoVarExpression(this.getLexicalScopeVariables());
				String assignedExpression=this.getNodeBody().getAssignment().getBooleanRHS().getBooleanExpression().getExpression(this.getLexicalScopeVariables());
				assignmentCommand=modifiedVariable+" := "+assignedExpression;
			}
			else{
				throw new RuntimeException(this.getNodeId()+":Boolean assignment: only boolean variables are supported.");
			}
		}
		else if (this.getNodeBody().getAssignment().getStringRHS()!=null){
			if (this.getNodeBody().getAssignment().getStringVariable()!=null){
				String modifiedVariable=new NodeVariable(this.getNodeBody().getAssignment().getStringVariable()).getNoVarExpression(this.getLexicalScopeVariables());
				String assignedExpression=null;				
				//String variable assign
				if (this.getNodeBody().getAssignment().getStringRHS().getStringVariable()!=null){					
					assignedExpression=new NodeVariable(this.getNodeBody().getAssignment().getStringRHS().getStringVariable()).getExpression(this.getLexicalScopeVariables());
				}
				//String value assign
				else if (this.getNodeBody().getAssignment().getStringRHS().getStringValue()!=null){					
					assignedExpression="const(v(\""+this.getNodeBody().getAssignment().getStringRHS().getStringValue()+"\"))";
				}				
				else{
					throw new RuntimeException(this.getNodeId()+":Only String variables and values are allowed for initialization.");
				}
				assignmentCommand=modifiedVariable+" := "+assignedExpression;
			}
			else{
				throw new RuntimeException(this.getNodeId()+":String Assignment type not supported");	
			}	
		}
		else{
			throw new RuntimeException(this.getNodeId()+":Assignment type not supported");
		}
					
		
		String out=	"op "+this.getNodeId()+" : -> Plexil .\n";
			out+=	"eq "+this.getNodeId()+" = assignment(\n";
			out+=	"\t\t\t'"+this.getNodeId()+",\n";
			out+=	"\t\t\t"+getVariablesDeclaration(this.getLexicalScopeVariables());
			out+=	"\t\t\t(\n";
			out+=	"  \t\t\t(endc:\t"+(this.getEndCondition()==null?"const(v(true))),\n":this.getEndCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(inv:\t"+(this.getInvariantCondition()==null?"const(v(true))),\n":this.getInvariantCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(post:\t"+(this.getPostCondition()==null?"const(v(true))),\n":this.getPostCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(pre:\t"+(this.getPreCondition()==null?"const(v(true))),\n":this.getPreCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(repeatc:\t"+(this.getRepeatCondition()==null?"const(v(false))),\n":this.getRepeatCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(skip:\t"+(this.getSkipCondition()==null?"const(v(false))),\n":this.getSkipCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(startc:\t"+(this.getStartCondition()==null?"const(v(true))),\n":this.getStartCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
			out+=	"  \t\t\t(priority: 1)\n";
			out+=	"  \t\t\t),\n";
			out+=	"\t\t\t("+assignmentCommand+")\n";
			out+=	"\t\t\t) .\n";
		return out;

	}
	
	public String getListNodeDeclaration(){
		
		String childsList="(";
		
		List<Node> childNodes =this.getChildNodes();
		
		int childsCount=0;
		for (Node child:childNodes){
			childsCount++;			
			childsList+=child.getNodeId()+(childsCount==childNodes.size()?"":" ");
		}
		
		childsList+=")";
		
		String out=	"op "+this.getNodeId()+" : -> Plexil .\n";
		out+=	"eq "+this.getNodeId()+" = list(\n";
		out+=	"\t\t\t'"+this.getNodeId()+",\n";
		out+=	"\t\t\t"+getVariablesDeclaration(this.getLexicalScopeVariables());
		out+=	"\t\t\t(\n";
		out+=	"  \t\t\t(endc:\t"+generateListNodeEndConditionExpression()+"),\n";
		out+=	"  \t\t\t(inv:\t"+(this.getInvariantCondition()==null?"const(v(true))),\n":this.getInvariantCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
		out+=	"  \t\t\t(post:\t"+(this.getPostCondition()==null?"const(v(true))),\n":this.getPostCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
		out+=	"  \t\t\t(pre:\t"+(this.getPreCondition()==null?"const(v(true))),\n":this.getPreCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
		out+=	"  \t\t\t(repeatc:\t"+(this.getRepeatCondition()==null?"const(v(false))),\n":this.getRepeatCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
		out+=	"  \t\t\t(skip:\t"+(this.getSkipCondition()==null?"const(v(false))),\n":this.getSkipCondition().getExpression(this.getLexicalScopeVariables())+"),\n");
		out+=	"  \t\t\t(startc:\t"+(this.getStartCondition()==null?"const(v(true)))\n":this.getStartCondition().getExpression(this.getLexicalScopeVariables())+")\n");
		out+=	"  \t\t\t),\n";
		out+=	"  \t\t\t"+childsList+"\n";
		out+=	"\t\t\t) .\n";
	return out;
	}
	
	
	/**
	 * 
	 * @return
	 */
	private String generateListNodeEndConditionExpression(){
		boolean implicitCondition=PlexilPropertiesLoader.getPlexilProperties().get("listNodeImplicitEndCondition").equals("true");
		
		if (implicitCondition){
			if (this.getEndCondition()==null){
				return "areChildren?("+PlexilPlan.getNodeAbsoluteName(this.getNodeId())+", finished)";
			}
			else{
				return this.getEndCondition().getExpression(this.getLexicalScopeVariables())+"and areChildren?("+PlexilPlan.getNodeAbsoluteName(this.getNodeId())+", finished)";
			}
		}
		else{
			if (this.getEndCondition()==null){
				return "const(v(true))";
			}
			else{
				return this.getEndCondition().getExpression(this.getLexicalScopeVariables());
			}
		}
		
		
	}
	
	/**
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public String getMaudeDeclaration(){
		if (this.getNodeType().equals("Command")){
			return getCommandNodeDeclaration();
		}
		
		else if (this.getNodeType().equals("Assignment")){
			return getAssignmentNodeDeclaration();
		}
		else if (this.getNodeType().equals("NodeList")){
			return getListNodeDeclaration();
		}
		else{
			return "";
		}
	}
	
	private String adjustCommandName(String cname){
		String adjustedCmd="";
		StringTokenizer st=new StringTokenizer(cname,".");
		while (st.hasMoreTokens()){
			String tok=st.nextToken().trim();
			adjustedCmd+="'"+tok+(st.hasMoreTokens()?" . ":"");			
		}
				
		return adjustedCmd;
	}
	
	private String absoluteID=null;
	
	
    public String getAbsoluteID() {
		return absoluteID;
	}

	public void setAbsoluteID(String absoluteId) {
		this.absoluteID = absoluteId;
	}

	@XmlElement(name = "Comment")
    protected String comment;
    @XmlElement(name = "NodeId", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlSchemaType(name = "NCName")
    protected String nodeId;
    @XmlElement(name = "StartCondition")
    protected StartCondition startCondition;
    @XmlElement(name = "RepeatCondition")
    protected RepeatCondition repeatCondition;
    @XmlElement(name = "PreCondition")
    protected PreCondition preCondition;
    @XmlElement(name = "PostCondition")
    protected PostCondition postCondition;
    @XmlElement(name = "InvariantCondition")
    protected InvariantCondition invariantCondition;
    @XmlElement(name = "EndCondition")
    protected EndCondition endCondition;
    @XmlElement(name = "SkipCondition")
    protected SkipCondition skipCondition;
    @XmlElement(name = "Priority")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger priority;
    @XmlElement(name = "Permissions")
    protected String permissions;
    @XmlElement(name = "Interface")
    protected Interface _interface;
    @XmlElement(name = "VariableDeclarations")
    protected VariableDeclarations variableDeclarations;
    @XmlElement(name = "NodeBody")
    protected NodeBody nodeBody;
    @XmlAttribute(name = "NodeType", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String nodeType;
    @XmlAttribute(name = "FileName")
    protected String fileName;
    @XmlAttribute(name = "LineNo")
    protected BigInteger lineNo;
    @XmlAttribute(name = "ColNo")
    protected BigInteger colNo;

    /**
     * Gets the value of the comment property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getComment() {
        return comment;
    }

    /**
     * Sets the value of the comment property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setComment(String value) {
        this.comment = value;
    }

    /**
     * Gets the value of the nodeId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNodeId() {
        return nodeId;
    }

    /**
     * Sets the value of the nodeId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNodeId(String value) {
        this.nodeId = value;
    }

    /**
     * Gets the value of the startCondition property.
     * 
     * @return
     *     possible object is
     *     {@link StartCondition }
     *     
     */
    public StartCondition getStartCondition() {
        return startCondition;
    }

    /**
     * Sets the value of the startCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link StartCondition }
     *     
     */
    public void setStartCondition(StartCondition value) {
        this.startCondition = value;
    }

    /**
     * Gets the value of the repeatCondition property.
     * 
     * @return
     *     possible object is
     *     {@link RepeatCondition }
     *     
     */
    public RepeatCondition getRepeatCondition() {
        return repeatCondition;
    }

    /**
     * Sets the value of the repeatCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link RepeatCondition }
     *     
     */
    public void setRepeatCondition(RepeatCondition value) {
        this.repeatCondition = value;
    }

    /**
     * Gets the value of the preCondition property.
     * 
     * @return
     *     possible object is
     *     {@link PreCondition }
     *     
     */
    public PreCondition getPreCondition() {
        return preCondition;
    }

    /**
     * Sets the value of the preCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link PreCondition }
     *     
     */
    public void setPreCondition(PreCondition value) {
        this.preCondition = value;
    }

    /**
     * Gets the value of the postCondition property.
     * 
     * @return
     *     possible object is
     *     {@link PostCondition }
     *     
     */
    public PostCondition getPostCondition() {
        return postCondition;
    }

    /**
     * Sets the value of the postCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostCondition }
     *     
     */
    public void setPostCondition(PostCondition value) {
        this.postCondition = value;
    }

    /**
     * Gets the value of the invariantCondition property.
     * 
     * @return
     *     possible object is
     *     {@link InvariantCondition }
     *     
     */
    public InvariantCondition getInvariantCondition() {
        return invariantCondition;
    }

    /**
     * Sets the value of the invariantCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link InvariantCondition }
     *     
     */
    public void setInvariantCondition(InvariantCondition value) {
        this.invariantCondition = value;
    }

    /**
     * Gets the value of the endCondition property.
     * 
     * @return
     *     possible object is
     *     {@link EndCondition }
     *     
     */
    public EndCondition getEndCondition() {
        return endCondition;
    }

    /**
     * Sets the value of the endCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link EndCondition }
     *     
     */
    public void setEndCondition(EndCondition value) {
        this.endCondition = value;
    }

    /**
     * Gets the value of the skipCondition property.
     * 
     * @return
     *     possible object is
     *     {@link SkipCondition }
     *     
     */
    public SkipCondition getSkipCondition() {
        return skipCondition;
    }

    /**
     * Sets the value of the skipCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link SkipCondition }
     *     
     */
    public void setSkipCondition(SkipCondition value) {
        this.skipCondition = value;
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getPriority() {
        return priority;
    }

    /**
     * Sets the value of the priority property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setPriority(BigInteger value) {
        this.priority = value;
    }

    /**
     * Gets the value of the permissions property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPermissions() {
        return permissions;
    }

    /**
     * Sets the value of the permissions property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPermissions(String value) {
        this.permissions = value;
    }

    /**
     * Gets the value of the interface property.
     * 
     * @return
     *     possible object is
     *     {@link Interface }
     *     
     */
    public Interface getInterface() {
        return _interface;
    }

    /**
     * Sets the value of the interface property.
     * 
     * @param value
     *     allowed object is
     *     {@link Interface }
     *     
     */
    public void setInterface(Interface value) {
        this._interface = value;
    }

    /**
     * Gets the value of the variableDeclarations property.
     * 
     * @return
     *     possible object is
     *     {@link VariableDeclarations }
     *     
     */
    public VariableDeclarations getVariableDeclarations() {
        return variableDeclarations;
    }

    /**
     * Sets the value of the variableDeclarations property.
     * 
     * @param value
     *     allowed object is
     *     {@link VariableDeclarations }
     *     
     */
    public void setVariableDeclarations(VariableDeclarations value) {
        this.variableDeclarations = value;
    }

    /**
     * Gets the value of the nodeBody property.
     * 
     * @return
     *     possible object is
     *     {@link NodeBody }
     *     
     */
    public NodeBody getNodeBody() {
        return nodeBody;
    }

    /**
     * Sets the value of the nodeBody property.
     * 
     * @param value
     *     allowed object is
     *     {@link NodeBody }
     *     
     */
    public void setNodeBody(NodeBody value) {
        this.nodeBody = value;
    }

    /**
     * Gets the value of the nodeType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNodeType() {
        return nodeType;
    }

    /**
     * Sets the value of the nodeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNodeType(String value) {
        this.nodeType = value;
    }

    /**
     * Gets the value of the fileName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * Sets the value of the fileName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFileName(String value) {
        this.fileName = value;
    }

    /**
     * Gets the value of the lineNo property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getLineNo() {
        return lineNo;
    }

    /**
     * Sets the value of the lineNo property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setLineNo(BigInteger value) {
        this.lineNo = value;
    }

    /**
     * Gets the value of the colNo property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getColNo() {
        return colNo;
    }

    /**
     * Sets the value of the colNo property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setColNo(BigInteger value) {
        this.colNo = value;
    }

    /**
     * 
     * @return
     */
    public List<DeclareVariable> getVariables(){
    	List<DeclareVariable> vars=new LinkedList<DeclareVariable>();
    	VariableDeclarations vd=this.getVariableDeclarations();
    	if (vd!=null){
        	List<Object> xmlObs=vd.getDeclareVariableOrDeclareArray();
        	for (Object o:xmlObs){
        		if (o instanceof DeclareVariable){
        			vars.add((DeclareVariable)o);
        		}
        	}
        	return vars;    		
    	}
    	else{
    		return new LinkedList<DeclareVariable>();
    	}
    }
    
    /**
     * 
     * @return
     */
    public Command getCommand(){
    	return this.getNodeBody().getCommand();
    }
    
    public boolean isLeaf(){
    	return this.getNodeBody().getNodeList()!=null;
    }
    
    public List<Node> getChildNodes(){
    	NodeBody nb=this.getNodeBody();
    	Node n=this;
    	if (this.getNodeBody().getNodeList()!=null){
    		return this.getNodeBody().getNodeList().getNode();	
    	}
    	return null;    	    	
    }
    
}

//  Declare lookups
//Boolean Lookup merging_traffic;
//Boolean Lookup let_behind;
//Boolean Lookup roll_stop;

cruisecontrol:
{
  // ---------
  // Constants
  // ---------

  // Positions and thresholds
  Integer INIT_DISTANCE   = 55;
  Integer BEGIN_RAMP      = 33;
  Integer END_RAMP        = 25;
  Integer AT_INTERSECTION =  0;

  // time units
  Integer timestep        =  1;
  Integer SEMAPHORE_CYCLE = 28;

  // timestamps when semaphore changes color
  Integer GREEN_LIGHT     = 28;
  Integer YELLOW_LIGHT    = 12;
  Integer RED_LIGHT       =  8;

  // Discretized speed values
  Integer STOPPED         =  0;
  Integer SLOW            =  1;
  Integer MODERATE        =  2;
  Integer FAST            =  3;
  Integer DESIRED         =  2;

  // ---------
  // Variables (proper)
  // ---------
  Integer A_distance	       = 55;
  Integer A_speed	       =  1;
  Integer A_acceleration       =  0;
  Integer A_semaphore_counter  = 28;
  Boolean cruise_enabled       = false;
  Integer cruise_speed	       =  0;

  // Should be lookups
  Boolean merging_traffic = true;
  Boolean let_behind      = true;
  Boolean roll_stop       = true;

  InvariantCondition: !(A_distance == AT_INTERSECTION AND 
                        A_speed > STOPPED);

  /* 
   ********************************************************************
   *  Three concurrently executing components: car, driver, semaphore  
   ********************************************************************
  */
 
  Concurrence

  // ==============================
  // Car movement
  // ==============================
  Car:
  {
      RepeatCondition: A_distance > AT_INTERSECTION AND A_speed > 0;

      Assignment: A_distance = A_distance - A_speed * timestep;
  } 
 
  // ==============================
  // Driver actions
  // ==============================

  Driver:
  {
    Sequence

    DriveToRamp:
    {
      StartCondition:  A_distance > BEGIN_RAMP;
      RepeatCondition: A_distance > BEGIN_RAMP;

      Concurrence

      SetDesiredCruise:
      {
        SkipCondition: !(A_speed == DESIRED AND cruise_enabled == false);
        Concurrence 
        EnableCruise:   { Assignment: cruise_enabled = true; }
        SetCruiseSpeed: { Assignment: cruise_speed = A_speed; }
        NoAcceleration: { Assignment: A_acceleration = 0; }
      }
      MaintainSpeed:
      {
        SkipCondition: !(A_speed == DESIRED AND cruise_enabled == true AND cruise_speed == DESIRED);
        Concurrence
        AtDesiredSpeed: { Assignment: A_speed = DESIRED; }
        ConstantSpeed:  { Assignment: A_acceleration = 0; }
      }
      IncreaseSpeed:
      {
        SkipCondition: !(A_speed < DESIRED);
        Concurrence
        IncSpeed2Cruise:   { Assignment: A_speed = A_speed + 1; }
        Accelerate2Cruise: { Assignment: A_acceleration = 1; }
      }
      DecreaseSpeed:
      {
        SkipCondition: !(A_speed > DESIRED);
        Concurrence
        DecSpeed2Cruise:   { Assignment: A_speed = A_speed - 1; }
        Decelerate2Cruise: { Assignment: A_acceleration = -1; }
      }
    }

    AvoidTraffic:
    {
      StartCondition: END_RAMP <= A_distance AND A_distance <= BEGIN_RAMP;

      Concurrence
      LetBehind:
      {
        SkipCondition: !(merging_traffic AND let_behind);
        Concurrence 
        IncSpeedAtRamp:   { Assignment: A_speed = A_speed + 1; }
        AccelerateAtRamp: { Assignment: A_acceleration = 1; }
      }
      LetAhead:
      {
        SkipCondition: !(merging_traffic AND !let_behind);
        Concurrence
        DecSpeedAtRamp:   { Assignment: A_speed = A_speed - 1; }
        DecelerateAtRamp: { Assignment: A_acceleration = -1; }
      }
      NoTraffic:
      {
        SkipCondition: merging_traffic;
        Assignment: A_acceleration = 0;
      }
    }

    StopAtLight:
    {
      StartCondition: AT_INTERSECTION < A_distance AND A_distance < END_RAMP;
      RepeatCondition: A_distance > AT_INTERSECTION AND A_speed > 0;

      Concurrence
      Roll:
      { 
        SkipCondition: !(cruise_enabled AND A_speed > cruise_speed AND roll_stop);
        Concurrence
        RollDecSpeed:        { Assignment: A_speed = A_speed - 1; }
        RollDecelerate:      { Assignment: A_acceleration = -1; }
      }
      Break:
      {
        SkipCondition: !(cruise_enabled AND A_speed > cruise_speed AND !roll_stop);
        Concurrence
        PressBreakPedal: { Assignment: A_speed = A_speed - 1; }
        BreakDecelerate: { Assignment: A_acceleration = -1; }
        BreakDisengage:  { Assignment: cruise_enabled = false; }
      }
      CruiseOn:
      { 
        SkipCondition: !(cruise_enabled AND A_speed == cruise_speed AND A_acceleration < 0);
        Assignment: A_acceleration = 0;
      }
      BreakLate:
      {
        SkipCondition: !(cruise_enabled AND A_speed <= cruise_speed AND !(A_acceleration < 0));
        Concurrence
        PressPedalLate:  { Assignment: A_speed = A_speed - 1; }
        DecelerateLate:  { Assignment: A_acceleration = -1; }
        DisengageLate:   { Assignment: cruise_enabled = false; }
      }
      NoCruiseSlowdown:
      {
        SkipCondition: !(!cruise_enabled AND A_speed > 0);
        Concurrence
        SlowDecSpeed:    { Assignment: A_speed = A_speed - 1; }
        SlowDecelerate:  { Assignment: A_acceleration = -1; }
      }
    }
  }

  // ==============================
  // Semaphore actions
  // ==============================

  Semaphore:
  {
      RepeatCondition: A_semaphore_counter > 0;
      Assignment: A_semaphore_counter = A_semaphore_counter - timestep;
  }

}

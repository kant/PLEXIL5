//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-257 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.06.03 at 09:23:03 AM COT 
//


package org.nianet.plexil.plexilxml2maude.jaxbmodel;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.nianet.plexil.plexilxml2maude.jaxbmodel.ext.BinaryBooleanOperator;
import org.nianet.plexil.plexilxml2maude.jaxbmodel.ext.BooleanExpression;
import org.nianet.plexil.plexilxml2maude.jaxbmodel.ext.NaryBooleanOperator;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;group ref="{}BooleanExpression" maxOccurs="unbounded" minOccurs="0"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "booleanExpression"
})
@XmlRootElement(name = "AND")
public class AND extends /*BinaryBooleanOperator*/NaryBooleanOperator{

    @Override
	public String getExpression(Map<String, String> variablesContext) {
		StringBuffer expression=new StringBuffer();
		List<BooleanExpression> operands=getOperands();
		int opIndex=0;
		
		if (operands.size()==0){
			return "const(v(true))";
		}
		
		if (operands.size()==1){
			return "("+operands.get(0).getExpression(variablesContext)+") and (const(v(true)))";
		}
		
		for (BooleanExpression be:operands){
			expression.append("("+be.getExpression(variablesContext)+")");
			opIndex++;
			if (opIndex<operands.size()){
				expression.append(" and ");
			}
		}
		
		return expression.toString();
	}

//	@Override
//	public String getExpression(Map<String,String> variablesContext) {
//		return "("+this.getLeftExpression().getExpression(variablesContext)+") and ("+this.getRightExpression().getExpression(variablesContext)+")";
//	}

	
	
	@XmlElementRefs({
        @XmlElementRef(name = "IsKnown", type = IsKnown.class),
        @XmlElementRef(name = "OR", type = OR.class),
        @XmlElementRef(name = "GT", type = GT.class),
        @XmlElementRef(name = "LT", type = LT.class),
        @XmlElementRef(name = "XOR", type = XOR.class),
        @XmlElementRef(name = "EQString", type = EQString.class),
        @XmlElementRef(name = "EQNumeric", type = EQNumeric.class),
        @XmlElementRef(name = "NEString", type = NEString.class),
        @XmlElementRef(name = "BooleanVariable", type = JAXBElement.class),
        @XmlElementRef(name = "LookupOnChange", type = LookupOnChange.class),
        @XmlElementRef(name = "NEInternal", type = NEInternal.class),
        @XmlElementRef(name = "EQBoolean", type = EQBoolean.class),
        @XmlElementRef(name = "BooleanValue", type = JAXBElement.class),
        @XmlElementRef(name = "LookupNow", type = LookupNow.class),
        @XmlElementRef(name = "AND", type = AND.class),
        @XmlElementRef(name = "NENumeric", type = NENumeric.class),
        @XmlElementRef(name = "LE", type = LE.class),
        @XmlElementRef(name = "ArrayElement", type = ArrayElement.class),
        @XmlElementRef(name = "EQInternal", type = EQInternal.class),
        @XmlElementRef(name = "NEBoolean", type = NEBoolean.class),
        @XmlElementRef(name = "NOT", type = NOT.class),
        @XmlElementRef(name = "GE", type = GE.class)
    })
    protected List<Object> booleanExpression;



	/**
     * Gets the value of the booleanExpression property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the booleanExpression property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBooleanExpression().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link IsKnown }
     * {@link OR }
     * {@link GT }
     * {@link LT }
     * {@link EQString }
     * {@link XOR }
     * {@link EQNumeric }
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link NEString }
     * {@link LookupOnChange }
     * {@link NEInternal }
     * {@link JAXBElement }{@code <}{@link Boolean }{@code >}
     * {@link EQBoolean }
     * {@link LookupNow }
     * {@link AND }
     * {@link LE }
     * {@link NENumeric }
     * {@link NEBoolean }
     * {@link EQInternal }
     * {@link ArrayElement }
     * {@link GE }
     * {@link NOT }
     * 
     * 
     */
    public List<Object> getBooleanExpression() {
        if (booleanExpression == null) {
            booleanExpression = new ArrayList<Object>();
        }
        return this.booleanExpression;
    }

}

options { STATIC = false; 
          OUTPUT_DIRECTORY = "../src/org/nianet/plexil/parser";}

PARSER_BEGIN(Plexilite)

package org.nianet.plexil.parser;

import org.nianet.plexil.*;

public class Plexilite {

  public static void main(String args[]) throws ParseException {
    Plexilite parser = new Plexilite(System.in);
	parser.state();
  }
  
  public static PlexilState parseState( String s ) throws ParseException {
    // System.err.println("*** Parsing:\n"+s);
    java.io.StringReader sr = new java.io.StringReader( s );
    java.io.Reader r = new java.io.BufferedReader( sr );
    Plexilite parser = new Plexilite( r );
	return parser.state();
  }

}

PARSER_END(Plexilite)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* delimiters */
{
  <PIPE: "|">
| <LBRA: "{">
| <RBRA: "}">
| <LSQR: "[">
| <RSQU: "]">
| <CTDL: "#">
| <QUOT: "\"">
| <ENTL: "|-">
| <LPAR: "(">
| <RPAR: ")">
| <LT: "<">
| <GT: ">">
| <LE: "<=">
| <GE: ">=">
| <PLUS: "+">
| <MINUS: "-">
| <TIMES: "*">
| <DIV: "/">
| <QUOTE: "'">
| <COLON: ":">
}

TOKEN : /* Reserved words */
{
  <CMND: "command">
| <CMNDINFO: "commandInfo">
| <NODE: "node">
| <NAME: "name">
| <LIST: "list">
| <RCMD: "retCommand">
| <ASGN: "assignment">
| <EMTY: "empty">
| <MEMO: "memory">
| <MONI: "monitor">
| <MTCX: "mtcontext">
| <NPAR: "nilpar">
| <NARG: "nilarg">
| <NCXS: "nilcontexts">
| <MTAC: "mtactions">
| <NLTR: "niltrace">
| <LVAR: "locVar">
| <EVAR: "extVar">
| <OR: "or">
| <AND: "and">
| <EQ: "equ">
| <NEQ: "nequ">
| <NOT: "not">
| <VAR: "var">
| <VAL: "v">
| <LOOK: "lookup">
| <LOOKONC: "lookupOnChange">
| <UNKNOWN: "unknown">
| <STAT: "isStatus?">
| <OUTC: "isOutcome?">
| <OUTCF: "isOutcomeFailure?">
| <CHILD: "areChildren?">
| <CONST: "const">
| <TRUE: "true">
| <FALSE: "false">  
| <FAIL: "fail">
}

TOKEN [IGNORE_CASE] : /* IDENTIFIERS */
{
  < IDENTIFIER   : <LETTER> ( <LETTEREXT> | <DIGIT> )* >
| < INTEGER      : ( <MINUS> )? ( <DIGIT> )+ >
| < FLOAT        : ( <MINUS> )? ( <DIGIT> )+ "." ( <DIGIT> )+ ("e" (<PLUS> | <MINUS>) ( <DIGIT> )+ )? >
| < MTSTRING     : "\"\"" >
| < STRING       : "\"" (~["\""])+ "\"" >
| < #LETTER      : ["a"-"z","A"-"Z"] >
| < #LETTEREXT   : ["a"-"z","A"-"Z","_","-"] >
| < #DIGIT       : ["0"-"9"] >
}

PlexilState state() :
{
  Contexts contexts = null;
  Context context = null;
  Configuration configuration = null;
  Trace trace = null;
  ActionSet actions = null;
}
{
  contexts = contexts()
<GT> context = context()
<ENTL> configuration = configuration() actions = actionSet() trace = trace() 
{ return PlexilState.getInstance(contexts,context,configuration,actions,trace); }
}

org.nianet.plexil.Contexts contexts() :
{
  Contexts ctxs = new Contexts();
  Context ctx = null;
}
{
  <LBRA> contextList(ctxs) <RBRA>  {return ctxs;}
}

void contextList(org.nianet.plexil.Contexts ctxs) :
{
  Context ctx = null;
}
{
  <NCXS>
| ctx = context() {ctxs.add(ctx);} (<CTDL> (ctx = context() {ctxs.add(ctx);}))*
}

org.nianet.plexil.Context context() :
{
  Context ctx = new Context();
  String name = null, value = null;
  Variable var = null;
}
{
  <MTCX>   {return ctx;}
| LOOKAHEAD(2) variable(ctx) ("," variable(ctx))* {return ctx;}
| <LPAR> variable(ctx) ("," variable(ctx))+ <RPAR> {return ctx;}
}

void variable(org.nianet.plexil.Context context) :
{
  String name = null, value = null;
}
{
  name=qualifiedid() <COLON> value=expression() {context.put(new Variable(name,value));}
| <LPAR> name=qualifiedid() <RPAR> <COLON> value=expression() {context.put(new Variable(name,value));}
}

org.nianet.plexil.ActionSet actionSet() :
{
  ActionSet actionSet = new ActionSet();
}
{
  <LBRA> <MTAC> <RBRA> {return actionSet;}
}

org.nianet.plexil.Trace trace() :
{
  Trace trace = new Trace();
}
{
  <LBRA> (transitionSet(trace))+ <RBRA> {return trace;}
}

void transitionSet(Trace trace) :
{
  TransitionSet ts = new TransitionSet();
}
{
  transition(ts) ("," transition(ts))*                  {trace.add(ts);}
| <LPAR> transition(ts) ("," transition(ts))+ <RPAR>    {trace.add(ts);}
}

void transition(TransitionSet ts) :
{
  Token t = null;
}
{
  <NLTR>
| <QUOT> t = <IDENTIFIER> <QUOT>         {ts.add(t.toString());}
}

org.nianet.plexil.Configuration configuration() :
{ 
  Configuration conf = new Configuration();
}
{
  "[" ( process(conf) )+ "]"  {return conf;}
}

void process(Configuration conf) :
{ 
  PlexilProcess p = null;
  ProcessType pt = null;
  String name = null;
}
{
  <LT> (name = qualifiedid()) ":" (pt = processType()) {p = new PlexilProcess(name,pt);} "|" 
       attributeSet(p) <GT> {conf.add(p);}
}

ProcessType processType() :
{ }
{   
  <CMND> {return ProcessType.command;}
| <LIST> {return ProcessType.list;}
| <RCMD> {return ProcessType.retCommand;}
| <ASGN> {return ProcessType.assignment;}
| <EMTY> {return ProcessType.empty;}
| <MEMO> {return ProcessType.memory;}
| <MONI> {return ProcessType.monitor;}
}

String quotedid(): 
{ Token t=null;
}
{ <QUOTE> t=<IDENTIFIER>
  {return t.toString();}
}

String qualifiedid() :
{ 
  String s1 = "";
  String s2 = ""; 
}
{
  s1=quotedid() ( "." s2 = quotedid() {s1 += "."+s2;} )*  
  { return s1; }
}

String qid() :
{ 
  String s = "";
}
{
  s=quotedid() ( "." quotedid() )*  
  { return s; }
}

void attributeSet(PlexilProcess p) :
{ }
{
  attribute(p) ( "," attribute(p) ) *
}

void attribute(PlexilProcess p) :
{ 
  String name = null;
  String value = "";
  String params = "";
  Token t = null;
}
{
  <CMND> ":" (<LPAR>)? value = qualifiedid() (<RPAR>)? <DIV> params = parameters() 
   { value += "("+params+")";
     p.setAttribute("command",value); }
| <CMNDINFO> ":" params = parameters() <DIV> value = qualifiedid() <DIV> t=<IDENTIFIER>
   { value += "["+params+"] -- "+t.toString();
     p.setAttribute("commandInfo",value); }
| <NODE> ":" <NAME> <LPAR> value = qualifiedid() <RPAR> {p.setAttribute("node",value);}
| (t = <LVAR> | t = <EVAR>) ":" (value = qid() | <LPAR> value = qid() <RPAR>) {p.setAttribute(t.toString(),value);}
| name = attribName() value = expression()    {p.setAttribute(name,value);}
}

String parameters() : 
{ String s = "";
  String ss = ""; 
}
{ (<NPAR> 
| <NARG> 
| s = expression() ( ss = expression() {s += ","+ss;} )* )
  {return s;}
}

String attribName() :
{
  Token t = null;
  String s = "";
}
{
  t = <IDENTIFIER> ":"             {return t.toString() + ": ";}
| <LPAR> s = qid() <RPAR> ":="     {return s + " := ";}
}

String expression() :                                                                  
{ String s = ""; 
}                                                                                        
{ s = or_expression() {return s;}                                                                         
}                                                                                         
                                                                                          
String or_expression() :                                                  
{ String s1 = ""; 
  String s2 = "";
}                                                                                        
{                                                                                         
  s1 = and_expression() ( LOOKAHEAD(2) <OR> s2 = and_expression() {s1 += " || "+s2;} )* 
  { return s1; }                      
}                                                                                         
                                                                                          
String and_expression() :                                                
{ String s1 = ""; 
  String s2 = "";
}                                                                                        
{                                                                                         
  s1 = equality_expression() ( LOOKAHEAD(2) <AND> s2 = equality_expression() {s1 += " && "+s2;} )*           
  { return s1; } 
}                                                                                         
String eq_op() :                                                                  
{}                                                                                        
{ <EQ> {return "==";} | <NEQ> {return "!=";}
}                                                                                         

String equality_expression() :                                      
{ String s1 = ""; 
  String s2 = ""; 
  String op = "";
}                                                                                        
{                                                                                         
  s1 = relational_expression()                                                                 
  [ LOOKAHEAD(2) op = eq_op() s2 = relational_expression() {s1 += " "+op+" "+s2;}]
  { return s1; }                                       
} 

String relational_expression() :                                  
{ String s1 = ""; 
  String s2 = "";
  String op = "";
}                                                                                        
{                                                                                         
  s1 = additive_expression()                                                                   
  [ LOOKAHEAD(2) op = rel_op() s2 = additive_expression() {s1 += " "+op+" "+s2;}]     
  { return s1; }                                       
}                                                                                         
                                                                                          
String rel_op() :                                                                           
{}                                                                                        
{ <LT> {return "<";} | <GT> {return ">";} | <LE> {return "<=";} | <GE> {return ">=";}
}                                                                                         
 
String add_op() :                                                                  
{}                                                                                        
{ <PLUS> {return "+";} | <MINUS> {return "-";}
}                                                                                         

String additive_expression() :                          
{ String s1 = ""; 
  String s2 = "";
  String op = "";
}                                                                                        
{                                                                                         
  s1=multiplicative_expression()                                                                      
  ( LOOKAHEAD(2) op = add_op() s2 = multiplicative_expression() {s1 += " "+op+" "+s2;})*
  { return s1; }                                          
}                                                                                         
                                                                                          
String multiplicative_expression() :                          
{ String s1 = ""; 
  String s2 = "";
  String op = "";
}                                                                                        
{                                                                                         
  s1=unary_expression()                                                                      
  ( LOOKAHEAD(2) op = mult_op() s2 = unary_expression() {s1 += " "+op+" "+s2;})*
  { return s1; }                                          
}                                                                                         
 
String mult_op() :                                                                 
{}                                                                                        
{ <TIMES> {return "*";} | <DIV> {return "/";}                                              
}                                                                                         
                                                                                          
String unary_expression() :                                                            
{ String s="";
  String op="";
}                                                                                        
{                                                                                         
  (op = add_op() s = unary_expression()) {return op+s;} 
|                                                                                         
  s = not_expression() {return s;}                                                                       
}                                                                                         
                                                                                          
String not_expression() :                                                              
{String s="";
}                                                                                        
{                                                                                         
  (<NOT> s = unary_expression()) {return  "!"+s;}
|                                                                                         
  s = primary_expression() {return s;}                                                                   
}                

String primary_expression() :                                                          
{ String s="";
  String s1 = "";
  Token t=null;
}                                                                                        
{                                                                                         
  <LPAR> s = expression() <RPAR> {return "("+s+")";}                                              
|                                                                                         
  <VAR> <LPAR> s = qid() <RPAR> {return s;}                                                                               
|                                                                                         
  <LOOK> <LPAR> s = qid() <RPAR> {return s;}                                                                               
|                                                                                         
  <LOOKONC> <LPAR> s = qid() "," s1 = value() <RPAR> {return s + "(" + s1 + ")" ;}                                                                               
|                                                                                         
  <STAT> <LPAR> s = qid() "," t = <IDENTIFIER> <RPAR> {return "isStatus?(" + s + ") == " + t.toString();} 
|                                                                                         
  <OUTC> <LPAR> s = qid() "," t = <IDENTIFIER> <RPAR> {return "isOutcome?(" + s + ") == " + t.toString();} 
|                                                                                         
  <OUTCF> <LPAR> s = qid() <RPAR> {return "isOutcomeFailure?(" + s + ")";} 
|                                                                                         
  <CHILD> <LPAR> s = qid() "," t = <IDENTIFIER> <RPAR> {return "areChildren?(" + s + ") == " + t.toString();} 
|                                                                                         
  <CONST> <LPAR> s = value() <RPAR> {return s;}
|
  s = failure() {return s;}
|
  LOOKAHEAD(2) s = function_call() {return s;}                                              
|
  t = <IDENTIFIER> {return t.toString();}      
|
  s = literal() {return s;}    
| 
  s = value() {return s;}   
}              

String value() :
{ String s="";
}
{ 
  <VAL> <LPAR> s = literal() <RPAR>  { return s; }
|
  <UNKNOWN> { return "unknown"; }
}                                                                           
                                                                                          
String literal() :                                                                          
{ String s="";
  Token t=null;
}                                                                                        
{ 
  t = <MTSTRING> {return t.toString();}                                                                              
|                                                                               
  t = <STRING> {return t.toString();}                                                                              
|                                                                               
  t = <FLOAT> {return t.toString();}                                                                              
|                                                                               
  t = <INTEGER> {return t.toString();}                                                                              
|                                                                                         
  s = boolean_literal()  {return s;}        
}                                                                                         
                                                                                          
String boolean_literal() :                                                             
{}                                                                                        
{                                                                                         
  <TRUE> {return "true";}                                                                              
|                                                                                         
  <FALSE> {return "false";}                                                                             
}                                                                                         
                                                                                   
String function_call() :
{ String s = "";
  Token  t = null;
}
{  t = <IDENTIFIER> <LPAR> s = expression() <RPAR>
   { return t+"("+s+")"; }
}                                                                          

String failure() :
{ String s = "";
}
{
  <FAIL> <LPAR> s = expression() <RPAR> 
  { return s; }
}
----                                                     Synchronous reductions
----                                                       author: Camilo Rocha

mod SYNC-REDUCTION is
 protecting FUNPRED .
 
 var A            : Action .
 var As           : Actions .
 var AS           : ActionSet .
 var NA           : AttributeSet .
 vars B B'        : Bool .
 var CC           : Cid .
 vars C C'        : Command .
 vars CI CI'      : CommandInfo .
 vars PS PS' PS'' : Configuration .
 var Gamma        : Context .
 vars E E'        : Expression .
 var  ES          : ExpressionSet .
 vars O O'        : Outcome .
 vars Q Q'        : NeQualified .
 vars S S'        : Status .
 var Tr           : Trace .
 vars V V' V''    : Value .

 op applyActions : Config -> Config .
 eq applyActions(Gamma |- [< Q : CC | status: S, NA > PS] {setStatus(Q,S'),AS} Tr)
  = applyActions(Gamma |- [< Q : CC | status: S', NA > PS] {AS} Tr) .
 eq applyActions(Gamma |- [< Q : CC | outcome: O, NA > PS] {setOutcome(Q,O'),AS} Tr)
  = applyActions(Gamma |- [< Q : CC | outcome: O', NA > PS] {AS} Tr) .
 eq applyActions(Gamma |- [< Q : CC | command: C, NA > PS] {setCommand(Q,C'),AS} Tr)
  = applyActions(Gamma |- [< Q : CC | command: C', NA > PS] {AS} Tr) .
 eq applyActions(Gamma |- [< Q : CC | commandInfo: CI, NA > PS] {setCommandInfo(Q,CI'),AS} Tr)
  = applyActions(Gamma |- [< Q : CC | commandInfo: CI', NA > PS] {AS} Tr) .
 eq applyActions(Gamma |- [< Q : memory | actVal: V, NA > PS] {setMem(Q,V'),AS} Tr)
  = applyActions(Gamma |- [< Q : memory | actVal: V', NA > PS] {AS} Tr) .
ceq applyActions(Gamma |- [PS] {resetMem(Q),AS} Tr)
  = applyActions(Gamma |- [PS'' resetMemory(PS')] {AS} Tr)
  if PS' := declaredVars(PS,Q)
  /\ PS'' PS' := PS .
 eq applyActions(Gamma |- [< Q : CC | loopenabled: B, NA > PS] {setLoopEnabled(Q,B'),AS} Tr)
  = applyActions(Gamma |- [< Q : CC | loopenabled: B', NA > PS] {AS} Tr) .
 eq applyActions(Gamma |- [< Q : CC | monscrtd: B, NA > PS] {setMonitorFlag(Q,B'),AS} Tr)
  = applyActions(Gamma |- [< Q : CC | monscrtd: B', NA > PS] {AS} Tr) .
 eq applyActions(Gamma |- [PS] {createMonitors(Q,E,B),AS} Tr)
  = applyActions(Gamma |- [$createMonitors(getLookups(E,mtexprs,true),Q,PS,B)] {AS} Tr) .
 eq applyActions(Gamma |- [PS] {removeMonitors(Q),AS} Tr)
  = applyActions(Gamma |- [$removeMonitors(PS,Q)] {AS} Tr) .
 eq applyActions(Conf:Config) = Conf:Config [owise] .

 op $createMonitors : ExpressionSet NeQualified Configuration Bool -> Configuration .
 eq $createMonitors(lookupOnChange(Q',V) ; ES, Q, PS, B)
  = $createMonitors(ES, Q, < Q' : monitor | node: name(Q), threshold: V, fromrepeat: B > PS, B) .
 eq $createMonitors(ES, Q, PS, B) = PS [owise] .
 op $removeMonitors : Configuration NeQualified -> Configuration .
 eq $removeMonitors( < Q : monitor | node: name(Q'), NA > PS, Q')
  = $removeMonitors(PS,Q') .
 eq $removeMonitors(PS,Q') = PS [owise] .

*** Activate redexes
 op activateRedexes : Config -> Config .
 eq activateRedexes( Gamma |- [< Q : CC | active: false, NA > PS] As Tr)
  = activateRedexes( Gamma |- [< Q : CC | active: true, NA > PS] As Tr) .
 eq activateRedexes(Cnf:Config) = Cnf:Config [owise] .
endm

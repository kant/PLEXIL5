/* Generated By:JavaCC: Do not edit this line. Plexilite.java */
package org.nianet.plexil.parser;

import org.nianet.plexil.*;

public class Plexilite implements PlexiliteConstants {

  public static void main(String args[]) throws ParseException {
    Plexilite parser = new Plexilite(System.in);
        parser.state();
  }

  public static PlexilState parseState( String s ) throws ParseException {
    // System.err.println("*** Parsing:\n"+s);
    java.io.StringReader sr = new java.io.StringReader( s );
    java.io.Reader r = new java.io.BufferedReader( sr );
    Plexilite parser = new Plexilite( r );
        return parser.state();
  }

  final public PlexilState state() throws ParseException {
  Contexts contexts = null;
  Context context = null;
  Configuration configuration = null;
  Trace trace = null;
  ActionSet actions = null;
    contexts = contexts();
    jj_consume_token(GT);
    context = context();
    jj_consume_token(ENTL);
    configuration = configuration();
    actions = actionSet();
    trace = trace();
  {if (true) return PlexilState.getInstance(contexts,context,configuration,actions,trace);}
    throw new Error("Missing return statement in function");
  }

  final public org.nianet.plexil.Contexts contexts() throws ParseException {
  Contexts ctxs = new Contexts();
  Context ctx = null;
    jj_consume_token(LBRA);
    contextList(ctxs);
    jj_consume_token(RBRA);
                                    {if (true) return ctxs;}
    throw new Error("Missing return statement in function");
  }

  final public void contextList(org.nianet.plexil.Contexts ctxs) throws ParseException {
  Context ctx = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NCXS:
      jj_consume_token(NCXS);
      break;
    case LPAR:
    case QUOTE:
    case MTCX:
      ctx = context();
                   ctxs.add(ctx);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CTDL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(CTDL);
        ctx = context();
                                                             ctxs.add(ctx);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public org.nianet.plexil.Context context() throws ParseException {
  Context ctx = new Context();
  String name = null, value = null;
  Variable var = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MTCX:
      jj_consume_token(MTCX);
            {if (true) return ctx;}
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        variable(ctx);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 69:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          jj_consume_token(69);
          variable(ctx);
        }
                                                   {if (true) return ctx;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          jj_consume_token(LPAR);
          variable(ctx);
          label_3:
          while (true) {
            jj_consume_token(69);
            variable(ctx);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 69:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
          }
          jj_consume_token(RPAR);
                                                    {if (true) return ctx;}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void variable(org.nianet.plexil.Context context) throws ParseException {
  String name = null, value = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      name = qualifiedid();
      jj_consume_token(COLON);
      value = expression();
                                                 context.put(new Variable(name,value));
      break;
    case LPAR:
      jj_consume_token(LPAR);
      name = qualifiedid();
      jj_consume_token(RPAR);
      jj_consume_token(COLON);
      value = expression();
                                                               context.put(new Variable(name,value));
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public org.nianet.plexil.ActionSet actionSet() throws ParseException {
  ActionSet actionSet = new ActionSet();
    jj_consume_token(LBRA);
    jj_consume_token(MTAC);
    jj_consume_token(RBRA);
                        {if (true) return actionSet;}
    throw new Error("Missing return statement in function");
  }

  final public org.nianet.plexil.Trace trace() throws ParseException {
  Trace trace = new Trace();
    jj_consume_token(LBRA);
    label_4:
    while (true) {
      transitionSet(trace);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOT:
      case LPAR:
      case NLTR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(RBRA);
                                         {if (true) return trace;}
    throw new Error("Missing return statement in function");
  }

  final public void transitionSet(Trace trace) throws ParseException {
  TransitionSet ts = new TransitionSet();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOT:
    case NLTR:
      transition(ts);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 69:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(69);
        transition(ts);
      }
                                                         trace.add(ts);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      transition(ts);
      label_6:
      while (true) {
        jj_consume_token(69);
        transition(ts);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 69:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(RPAR);
                                                         trace.add(ts);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void transition(TransitionSet ts) throws ParseException {
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NLTR:
      jj_consume_token(NLTR);
      break;
    case QUOT:
      jj_consume_token(QUOT);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(QUOT);
                                          ts.add(t.toString());
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public org.nianet.plexil.Configuration configuration() throws ParseException {
  Configuration conf = new Configuration();
    jj_consume_token(LSQR);
    label_7:
    while (true) {
      process(conf);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(RSQU);
                               {if (true) return conf;}
    throw new Error("Missing return statement in function");
  }

  final public void process(Configuration conf) throws ParseException {
  PlexilProcess p = null;
  ProcessType pt = null;
  String name = null;
    jj_consume_token(LT);
    name = qualifiedid();
    jj_consume_token(COLON);
    pt = processType();
                                                        p = new PlexilProcess(name,pt);
    jj_consume_token(PIPE);
    attributeSet(p);
    jj_consume_token(GT);
                             conf.add(p);
  }

  final public ProcessType processType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CMND:
      jj_consume_token(CMND);
          {if (true) return ProcessType.command;}
      break;
    case LIST:
      jj_consume_token(LIST);
          {if (true) return ProcessType.list;}
      break;
    case RCMD:
      jj_consume_token(RCMD);
          {if (true) return ProcessType.retCommand;}
      break;
    case ASGN:
      jj_consume_token(ASGN);
          {if (true) return ProcessType.assignment;}
      break;
    case EMTY:
      jj_consume_token(EMTY);
          {if (true) return ProcessType.empty;}
      break;
    case MEMO:
      jj_consume_token(MEMO);
          {if (true) return ProcessType.memory;}
      break;
    case MONI:
      jj_consume_token(MONI);
          {if (true) return ProcessType.monitor;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String quotedid() throws ParseException {
  Token t=null;
    jj_consume_token(QUOTE);
    t = jj_consume_token(IDENTIFIER);
   {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String qualifiedid() throws ParseException {
  String s1 = "";
  String s2 = "";
    s1 = quotedid();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(70);
      s2 = quotedid();
                                       s1 += "."+s2;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String qid() throws ParseException {
  String s = "";
    s = quotedid();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      jj_consume_token(70);
      quotedid();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void attributeSet(PlexilProcess p) throws ParseException {
    attribute(p);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      jj_consume_token(69);
      attribute(p);
    }
  }

  final public void attribute(PlexilProcess p) throws ParseException {
  String name = null;
  String value = "";
  String params = "";
  Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CMND:
      jj_consume_token(CMND);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      value = qualifiedid();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPAR:
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(DIV);
      params = parameters();
     value += "("+params+")";
     p.setAttribute("command",value);
      break;
    case CMNDINFO:
      jj_consume_token(CMNDINFO);
      jj_consume_token(COLON);
      params = parameters();
      jj_consume_token(DIV);
      value = qualifiedid();
      jj_consume_token(DIV);
      t = jj_consume_token(IDENTIFIER);
     value += "["+params+"] -- "+t.toString();
     p.setAttribute("commandInfo",value);
      break;
    case NODE:
      jj_consume_token(NODE);
      jj_consume_token(COLON);
      jj_consume_token(NAME);
      jj_consume_token(LPAR);
      value = qualifiedid();
      jj_consume_token(RPAR);
                                                         p.setAttribute("node",value);
      break;
    case LVAR:
    case EVAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LVAR:
        t = jj_consume_token(LVAR);
        break;
      case EVAR:
        t = jj_consume_token(EVAR);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTE:
        value = qid();
        break;
      case LPAR:
        jj_consume_token(LPAR);
        value = qid();
        jj_consume_token(RPAR);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                               p.setAttribute(t.toString(),value);
      break;
    case LPAR:
    case IDENTIFIER:
      name = attribName();
      value = expression();
                                               p.setAttribute(name,value);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String parameters() throws ParseException {
  String s = "";
  String ss = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NPAR:
      jj_consume_token(NPAR);
      break;
    case NARG:
      jj_consume_token(NARG);
      break;
    case LPAR:
    case PLUS:
    case MINUS:
    case NOT:
    case VAR:
    case VAL:
    case LOOK:
    case LOOKONC:
    case UNKNOWN:
    case STAT:
    case OUTC:
    case OUTCF:
    case CHILD:
    case CONST:
    case TRUE:
    case FALSE:
    case FAIL:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case MTSTRING:
    case STRING:
      s = expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case PLUS:
        case MINUS:
        case NOT:
        case VAR:
        case VAL:
        case LOOK:
        case LOOKONC:
        case UNKNOWN:
        case STAT:
        case OUTC:
        case OUTCF:
        case CHILD:
        case CONST:
        case TRUE:
        case FALSE:
        case FAIL:
        case IDENTIFIER:
        case INTEGER:
        case FLOAT:
        case MTSTRING:
        case STRING:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        ss = expression();
                                        s += ","+ss;
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String attribName() throws ParseException {
  Token t = null;
  String s = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
                                    {if (true) return t.toString() + ": ";}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(RPAR);
      jj_consume_token(71);
                                    {if (true) return s + " := ";}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException {
  String s = "";
    s = or_expression();
                       {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String or_expression() throws ParseException {
  String s1 = "";
  String s2 = "";
    s1 = and_expression();
    label_12:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(OR);
      s2 = and_expression();
                                                                   s1 += " || "+s2;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String and_expression() throws ParseException {
  String s1 = "";
  String s2 = "";
    s1 = equality_expression();
    label_13:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(AND);
      s2 = equality_expression();
                                                                              s1 += " && "+s2;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String eq_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
        {if (true) return "==";}
      break;
    case NEQ:
      jj_consume_token(NEQ);
                               {if (true) return "!=";}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String equality_expression() throws ParseException {
  String s1 = "";
  String s2 = "";
  String op = "";
    s1 = relational_expression();
    if (jj_2_4(2)) {
      op = eq_op();
      s2 = relational_expression();
                                                            s1 += " "+op+" "+s2;
    } else {
      ;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String relational_expression() throws ParseException {
  String s1 = "";
  String s2 = "";
  String op = "";
    s1 = additive_expression();
    if (jj_2_5(2)) {
      op = rel_op();
      s2 = additive_expression();
                                                           s1 += " "+op+" "+s2;
    } else {
      ;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String rel_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
        {if (true) return "<";}
      break;
    case GT:
      jj_consume_token(GT);
                             {if (true) return ">";}
      break;
    case LE:
      jj_consume_token(LE);
                                                  {if (true) return "<=";}
      break;
    case GE:
      jj_consume_token(GE);
                                                                        {if (true) return ">=";}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String add_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
          {if (true) return "+";}
      break;
    case MINUS:
      jj_consume_token(MINUS);
                                  {if (true) return "-";}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String additive_expression() throws ParseException {
  String s1 = "";
  String s2 = "";
  String op = "";
    s1 = multiplicative_expression();
    label_14:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_14;
      }
      op = add_op();
      s2 = multiplicative_expression();
                                                                 s1 += " "+op+" "+s2;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicative_expression() throws ParseException {
  String s1 = "";
  String s2 = "";
  String op = "";
    s1 = unary_expression();
    label_15:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_15;
      }
      op = mult_op();
      s2 = unary_expression();
                                                         s1 += " "+op+" "+s2;
    }
    {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  final public String mult_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
           {if (true) return "*";}
      break;
    case DIV:
      jj_consume_token(DIV);
                                 {if (true) return "/";}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String unary_expression() throws ParseException {
  String s="";
  String op="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      op = add_op();
      s = unary_expression();
                                          {if (true) return op+s;}
      break;
    case LPAR:
    case NOT:
    case VAR:
    case VAL:
    case LOOK:
    case LOOKONC:
    case UNKNOWN:
    case STAT:
    case OUTC:
    case OUTCF:
    case CHILD:
    case CONST:
    case TRUE:
    case FALSE:
    case FAIL:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case MTSTRING:
    case STRING:
      s = not_expression();
                        {if (true) return s;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String not_expression() throws ParseException {
 String s="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      s = unary_expression();
                                  {if (true) return  "!"+s;}
      break;
    case LPAR:
    case VAR:
    case VAL:
    case LOOK:
    case LOOKONC:
    case UNKNOWN:
    case STAT:
    case OUTC:
    case OUTCF:
    case CHILD:
    case CONST:
    case TRUE:
    case FALSE:
    case FAIL:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case MTSTRING:
    case STRING:
      s = primary_expression();
                            {if (true) return s;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String primary_expression() throws ParseException {
  String s="";
  String s1 = "";
  Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      s = expression();
      jj_consume_token(RPAR);
                                  {if (true) return "("+s+")";}
      break;
    case VAR:
      jj_consume_token(VAR);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(RPAR);
                                 {if (true) return s;}
      break;
    case LOOK:
      jj_consume_token(LOOK);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(RPAR);
                                  {if (true) return s;}
      break;
    case LOOKONC:
      jj_consume_token(LOOKONC);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(69);
      s1 = value();
      jj_consume_token(RPAR);
                                                      {if (true) return s + "(" + s1 + ")" ;}
      break;
    case STAT:
      jj_consume_token(STAT);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(69);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAR);
                                                       {if (true) return "isStatus?(" + s + ") == " + t.toString();}
      break;
    case OUTC:
      jj_consume_token(OUTC);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(69);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAR);
                                                       {if (true) return "isOutcome?(" + s + ") == " + t.toString();}
      break;
    case OUTCF:
      jj_consume_token(OUTCF);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(RPAR);
                                   {if (true) return "isOutcomeFailure?(" + s + ")";}
      break;
    case CHILD:
      jj_consume_token(CHILD);
      jj_consume_token(LPAR);
      s = qid();
      jj_consume_token(69);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(RPAR);
                                                        {if (true) return "areChildren?(" + s + ") == " + t.toString();}
      break;
    case CONST:
      jj_consume_token(CONST);
      jj_consume_token(LPAR);
      s = value();
      jj_consume_token(RPAR);
                                     {if (true) return s;}
      break;
    case FAIL:
      s = failure();
                 {if (true) return s;}
      break;
    default:
      jj_la1[31] = jj_gen;
      if (jj_2_8(2)) {
        s = function_call();
                                    {if (true) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                    {if (true) return t.toString();}
          break;
        case TRUE:
        case FALSE:
        case INTEGER:
        case FLOAT:
        case MTSTRING:
        case STRING:
          s = literal();
                 {if (true) return s;}
          break;
        case VAL:
        case UNKNOWN:
          s = value();
               {if (true) return s;}
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String value() throws ParseException {
  String s="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAL:
      jj_consume_token(VAL);
      jj_consume_token(LPAR);
      s = literal();
      jj_consume_token(RPAR);
                                       {if (true) return s;}
      break;
    case UNKNOWN:
      jj_consume_token(UNKNOWN);
              {if (true) return "unknown";}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String literal() throws ParseException {
  String s="";
  Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MTSTRING:
      t = jj_consume_token(MTSTRING);
                  {if (true) return t.toString();}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                {if (true) return t.toString();}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
               {if (true) return t.toString();}
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                 {if (true) return t.toString();}
      break;
    case TRUE:
    case FALSE:
      s = boolean_literal();
                          {if (true) return s;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String boolean_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
          {if (true) return "true";}
      break;
    case FALSE:
      jj_consume_token(FALSE);
           {if (true) return "false";}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String function_call() throws ParseException {
  String s = "";
  Token  t = null;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAR);
    s = expression();
    jj_consume_token(RPAR);
     {if (true) return t+"("+s+")";}
    throw new Error("Missing return statement in function");
  }

  final public String failure() throws ParseException {
  String s = "";
    jj_consume_token(FAIL);
    jj_consume_token(LPAR);
    s = expression();
    jj_consume_token(RPAR);
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(MTSTRING)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(UNKNOWN)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(CHILD)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(OUTCF)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(OUTC)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(QUOTE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(STAT)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(LOOKONC)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(LOOK)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(FAIL)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public PlexiliteTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x802000,0x0,0x0,0x0,0x2000,0x802000,0x2800,0x0,0x0,0x2800,0x800,0x8000,0xe2000000,0x0,0x0,0x0,0x2000,0x4000,0x0,0x802000,0xe002000,0x182000,0x182000,0x2000,0x0,0x78000,0x180000,0x600000,0x182000,0x2000,0x2000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x48,0x0,0x0,0x8,0x0,0x0,0x100,0x0,0x0,0x100,0x100,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x600,0x0,0x20000600,0xffff8000,0xffff8030,0x20000000,0x6000,0x0,0x0,0x0,0xffff8000,0xffff8000,0x13ed0000,0xec120000,0x120000,0xcc000000,0xc000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x40,0x40,0x20,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x3,0x0,0x3,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Plexilite(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Plexilite(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlexiliteTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Plexilite(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlexiliteTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Plexilite(PlexiliteTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PlexiliteTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

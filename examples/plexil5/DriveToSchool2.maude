mod DRIVETOSCHOOL is
 protecting PLEXILITE-PREDS .


op DriveToSchool : -> Plexil .
eq DriveToSchool = list(
			'DriveToSchool,
			nilocdecl,
			(
  			(endc:	areChildren?('DriveToSchool, finished)),
  			(inv:	(not (((isOutcomeFailure?(('StartCar . 'DriveToSchool))) or (isOutcomeFailure?(('SelectStation . 'DriveToSchool))))))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(StartCar SelectStation SelectStation DriveUntilAtSchool)
			) .


op StartCar : -> Plexil .
eq StartCar = list(
			'StartCar,
			nilocdecl,
			(
  			(endc:	((isOutcome?(('KeyStart . 'StartCar . 'DriveToSchool),success)) or (isOutcome?(('PushStart . 'StartCar . 'DriveToSchool),success)))and areChildren?('StartCar . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	(((isOutcome?(('KeyStart . 'StartCar . 'DriveToSchool),success)) or (isOutcome?(('PushStart . 'StartCar . 'DriveToSchool),success)))) and (const(v(true)))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(KeyStart PushStart)
			) .


op KeyStart : -> Plexil .
eq KeyStart = list(
			'KeyStart,
			nilocdecl,
			(
  			(endc:	areChildren?('KeyStart . 'StartCar . 'DriveToSchool, finished)),
  			(inv:	(not (((isOutcomeFailure?(('PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool))) or (isOutcomeFailure?(('TurnKeyCombo . 'KeyStart . 'StartCar . 'DriveToSchool))))))),
  			(post:	lookup ('car-started)),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(PrimeAccelerator TurnKeyCombo)
			) .


op PrimeAccelerator : -> Plexil .
eq PrimeAccelerator = list(
			'PrimeAccelerator,
			(('count : v(0)) ),
			(
  			(endc:	areChildren?('PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(ep2cp-ForLoop)
			) .


op ep2cp-ForLoop : -> Plexil .
eq ep2cp-ForLoop = list(
			'ep2cp-ForLoop,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-ForLoop . 'PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	var(('count . 'PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool)) < const(v(3))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(ep2cp-ForDo ep2cp-ForLoopUpdater)
			) .


op ep2cp-ForDo : -> Plexil .
eq ep2cp-ForDo = list(
			'ep2cp-ForDo,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-ForDo . 'ep2cp-ForLoop . 'PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(PressAccelerator)
			) .


op PressAccelerator : -> Plexil .
eq PressAccelerator = command(
			'PressAccelerator,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('depress-accelerator) / nilpar
			) .


op ep2cp-ForLoopUpdater : -> Plexil .
eq ep2cp-ForLoopUpdater = assignment(
			'ep2cp-ForLoopUpdater,
			nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('ep2cp-ForDo . 'ep2cp-ForLoop . 'PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool),finished))),
  			(priority: 1)
  			),
			(('count . 'PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool) := (var(('count . 'PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool)) + const(v(1))))
			) .


op TurnKeyCombo : -> Plexil .
eq TurnKeyCombo = list(
			'TurnKeyCombo,
			nilocdecl,
			(
  			(endc:	areChildren?('TurnKeyCombo . 'KeyStart . 'StartCar . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('PrimeAccelerator . 'KeyStart . 'StartCar . 'DriveToSchool),finished)))
  			),
  			(DepressClutch TurnKey)
			) .


op DepressClutch : -> Plexil .
eq DepressClutch = command(
			'DepressClutch,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('depress-clutch) / nilpar
			) .


op TurnKey : -> Plexil .
eq TurnKey = command(
			'TurnKey,
nilocdecl,
			(
  			(endc:	lookupOnChange ('car-started,v(0))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('turn-key) / nilpar
			) .


op PushStart : -> Plexil .
eq PushStart = command(
			'PushStart,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	lookup ('car-started)),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('KeyStart . 'StartCar . 'DriveToSchool),finished)))
  			),
			('push-start) / nilpar
			) .


op SelectStation : -> Plexil .
eq SelectStation = list(
			'SelectStation,
			(('ep2cp-test : v(false)) ),
			(
  			(endc:	areChildren?('SelectStation . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('StartCar . 'DriveToSchool),finished)))
  			),
  			(ep2cp-IfSetup ep2cp-IfBody)
			) .


op ep2cp-IfSetup : -> Plexil .
eq ep2cp-IfSetup = assignment(
			'ep2cp-IfSetup,
			nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true))),
  			(priority: 1)
  			),
			(('ep2cp-test . 'SelectStation . 'DriveToSchool) := lookup ('no-passengers))
			) .


op ep2cp-IfBody : -> Plexil .
eq ep2cp-IfBody = list(
			'ep2cp-IfBody,
			nilocdecl,
			(
  			(endc:	((isStatus?(('ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished)) or (isStatus?(('ep2cp-IfElseCase . 'ep2cp-IfBody . 'SelectStation . 'DriveToSchool),finished)))and areChildren?('ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('ep2cp-IfSetup . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished)))
  			),
  			(ep2cp-IfThenCase ep2cp-IfElseCase)
			) .


op ep2cp-IfThenCase : -> Plexil .
eq ep2cp-IfThenCase = list(
			'ep2cp-IfThenCase,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(var(('ep2cp-test . 'SelectStation . 'DriveToSchool)) equ const(v(true))))
  			),
  			(Radio)
			) .


op Radio : -> Plexil .
eq Radio = command(
			'Radio,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('select-radio) / nilpar
			) .


op ep2cp-IfElseCase : -> Plexil .
eq ep2cp-IfElseCase = list(
			'ep2cp-IfElseCase,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-IfElseCase . 'ep2cp-IfBody . 'SelectStation . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(not ((var(('ep2cp-test . 'SelectStation . 'DriveToSchool)) equ const(v(true))))))
  			),
  			(CD)
			) .


op CD : -> Plexil .
eq CD = command(
			'CD,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('select-CD) / nilpar
			) .


op SelectStation : -> Plexil .
eq SelectStation = list(
			'SelectStation,
			(('ep2cp-test : v(false)) ),
			(
  			(endc:	areChildren?('SelectStation . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('SelectStation . 'DriveToSchool),finished)))
  			),
  			(ep2cp-IfSetup ep2cp-IfBody)
			) .


op ep2cp-IfSetup : -> Plexil .
eq ep2cp-IfSetup = assignment(
			'ep2cp-IfSetup,
			nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true))),
  			(priority: 1)
  			),
			(('ep2cp-test . 'SelectStation . 'DriveToSchool) := lookup ('no-passengers))
			) .


op ep2cp-IfBody : -> Plexil .
eq ep2cp-IfBody = list(
			'ep2cp-IfBody,
			nilocdecl,
			(
  			(endc:	((isStatus?(('ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished)) or (isStatus?(('ep2cp-IfElseCase . 'ep2cp-IfBody . 'SelectStation . 'DriveToSchool),finished)))and areChildren?('ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('ep2cp-IfSetup . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished)))
  			),
  			(ep2cp-IfThenCase ep2cp-IfElseCase)
			) .


op ep2cp-IfThenCase : -> Plexil .
eq ep2cp-IfThenCase = list(
			'ep2cp-IfThenCase,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(var(('ep2cp-test . 'SelectStation . 'DriveToSchool)) equ const(v(true))))
  			),
  			(Radio)
			) .


op Radio : -> Plexil .
eq Radio = command(
			'Radio,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('select-radio) / nilpar
			) .


op ep2cp-IfElseCase : -> Plexil .
eq ep2cp-IfElseCase = list(
			'ep2cp-IfElseCase,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-IfElseCase . 'ep2cp-IfBody . 'SelectStation . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(not ((var(('ep2cp-test . 'SelectStation . 'DriveToSchool)) equ const(v(true))))))
  			),
  			(CD)
			) .


op CD : -> Plexil .
eq CD = command(
			'CD,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('select-CD) / nilpar
			) .


op DriveUntilAtSchool : -> Plexil .
eq DriveUntilAtSchool = list(
			'DriveUntilAtSchool,
			(('ep2cp-test : v(false)) ),
			(
  			(endc:	areChildren?('DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('SelectStation . 'DriveToSchool),finished)))
  			),
  			(ep2cp-WhileBody)
			) .


op ep2cp-WhileBody : -> Plexil .
eq ep2cp-WhileBody = list(
			'ep2cp-WhileBody,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(ep2cp-WhileSetup ep2cp-WhileTrue)
			) .


op ep2cp-WhileSetup : -> Plexil .
eq ep2cp-WhileSetup = assignment(
			'ep2cp-WhileSetup,
			nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true))),
  			(priority: 1)
  			),
			(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool) := (not (lookup ('at-school))))
			) .


op ep2cp-WhileTrue : -> Plexil .
eq ep2cp-WhileTrue = list(
			'ep2cp-WhileTrue,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	(var(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool)) equ const(v(true)))),
  			(skip:	((isStatus?(('ep2cp-WhileSetup . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished))) and ((not ((var(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool)) equ const(v(true))))))),
  			(startc:	((isStatus?(('ep2cp-WhileSetup . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished))) and ((var(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool)) equ const(v(true)))))
  			),
  			(ep2cp-WhileAction ep2cp-WhileRetest)
			) .


op ep2cp-WhileAction : -> Plexil .
eq ep2cp-WhileAction = list(
			'ep2cp-WhileAction,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(DriveUntilAtSchool--CHILD--1)
			) .


op DriveUntilAtSchool--CHILD--1 : -> Plexil .
eq DriveUntilAtSchool--CHILD--1 = list(
			'DriveUntilAtSchool--CHILD--1,
			nilocdecl,
			(
  			(endc:	areChildren?('DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(HandleRain DriveABit)
			) .


op HandleRain : -> Plexil .
eq HandleRain = list(
			'HandleRain,
			(('ep2cp-test : v(false)) ),
			(
  			(endc:	areChildren?('HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(ep2cp-IfSetup ep2cp-IfBody)
			) .


op ep2cp-IfSetup : -> Plexil .
eq ep2cp-IfSetup = assignment(
			'ep2cp-IfSetup,
			nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true))),
  			(priority: 1)
  			),
			(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool) := lookup ('raining))
			) .


op ep2cp-IfBody : -> Plexil .
eq ep2cp-IfBody = list(
			'ep2cp-IfBody,
			nilocdecl,
			(
  			(endc:	((isStatus?(('ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished)) or (not ((var(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool)) equ const(v(true))))))and areChildren?('ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('ep2cp-IfSetup . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished)))
  			),
  			(ep2cp-IfThenCase)
			) .


op ep2cp-IfThenCase : -> Plexil .
eq ep2cp-IfThenCase = list(
			'ep2cp-IfThenCase,
			nilocdecl,
			(
  			(endc:	areChildren?('ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(var(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool)) equ const(v(true))))
  			),
  			(HandleRain--CHILD--1)
			) .


op HandleRain--CHILD--1 : -> Plexil .
eq HandleRain--CHILD--1 = list(
			'HandleRain--CHILD--1,
			nilocdecl,
			(
  			(endc:	areChildren?('HandleRain--CHILD--1 . 'ep2cp-IfThenCase . 'ep2cp-IfBody . 'HandleRain . 'DriveUntilAtSchool--CHILD--1 . 'ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool, finished)),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
  			(Wipers Lights)
			) .


op Wipers : -> Plexil .
eq Wipers = command(
			'Wipers,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('turn-on-wipers) / nilpar
			) .


op Lights : -> Plexil .
eq Lights = command(
			'Lights,
nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('turn-on-lights) / nilpar
			) .


op DriveABit : -> Plexil .
eq DriveABit = command(
			'DriveABit,
nilocdecl,
			(
  			(endc:	lookupOnChange ('at-school,v(0))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	const(v(true)))
  			),
			('drive-a-bit) / nilpar
			) .


op ep2cp-WhileRetest : -> Plexil .
eq ep2cp-WhileRetest = assignment(
			'ep2cp-WhileRetest,
			nilocdecl,
			(
  			(endc:	const(v(true))),
  			(inv:	const(v(true))),
  			(post:	const(v(true))),
  			(pre:	const(v(true))),
  			(repeatc:	const(v(false))),
  			(skip:	const(v(false))),
  			(startc:	(isStatus?(('ep2cp-WhileAction . 'ep2cp-WhileTrue . 'ep2cp-WhileBody . 'DriveUntilAtSchool . 'DriveToSchool),finished))),
  			(priority: 1)
  			),
			(('ep2cp-test . 'DriveUntilAtSchool . 'DriveToSchool) := (not (lookup ('at-school))))
			) .


op DriveToSchoolEnv : -> ContextList .
eq DriveToSchoolEnv = mtcontext .


endm

eof